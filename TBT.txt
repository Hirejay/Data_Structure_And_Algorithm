

#include<iostream>

#define MAX 30

using namespace std;


int isoperand(char ch)
{
	if(((ch>='A')&&(ch<='Z'))||((ch>='a')&&(ch<='z')))
		return 1;
	else
		return 0;
}
int isoperator(char ch)
{
	if((ch=='+')||(ch=='-')||(ch=='/')||(ch=='*')||(ch=='$')||(ch=='^'))
		return 1;

	else
		return 0;
}
struct node
{
	struct node *lchild;
	int lthread;
	char data;
	int rthread;
	struct node *rchild;
};
node* leftmost(node *curr)
{
	while(curr->lthread!=1)
	{
		curr=curr->lchild;
	}
	return(curr);
}
node* rightmost(node *curr)
{
	while(curr->rthread!=1)
	{
		curr=curr->rchild;
	}
	return(curr);
}

class TBT
{
		node *root,*dummy;
	public: TBT();
		void create(char postfix[MAX]);
		void inorder();
		void preorder();
};
TBT::TBT()
{
	root=NULL;
	dummy=NULL;
}
void TBT::create(char postfix[MAX])
{
	int i,top=-1;
	node *stack[MAX],*temp,*succ_node,*predi_node;
	char ch;
	dummy= new node;
	dummy->lchild=root;
	dummy->lthread=0;
	dummy->data='\0';
	dummy->rthread=1;
	dummy->rchild=dummy;

	for(i=0;postfix[i]!='\0';i++)
	{
		ch=postfix[i];
		temp=new node;
		temp->lchild=dummy;
		temp->lthread=1;
		temp->data=ch;
		temp->rthread=1;
		temp->rchild=dummy;
		if(isoperand(ch))
		{
		    stack[++top]=temp;
		}
		else if(isoperator(ch))
		{
			temp->rchild=stack[top--];
			temp->lchild=stack[top--];
			temp->lthread=0;
			temp->rthread=0;
			predi_node=leftmost(temp->rchild);
			predi_node->lchild=temp;
			succ_node=rightmost(temp->lchild);
			succ_node->rchild=temp;
			stack[++top]=temp;
		}
		else
			{
			cout<<"\n Wrong expression" ;
				cout<<"\n Node cannot be created";
				//getch();
				exit(0);
			}
	}
	root=stack[top--];
	dummy->lchild=root;
}
void TBT::inorder()
{
	int flag=0;
	node *curr;
	curr=dummy->lchild;
	do
	{
		if(((curr->lthread)!=1)&&(flag==0) )
		{
			curr=curr->lchild;
		}
		else
		{
			cout<< curr->data<<" ";
			flag=curr->rthread;
			curr=curr->rchild;
		}
	}while((curr!=dummy));
}
void TBT::preorder()
{
	int flag=0;
	node *curr;
	curr=dummy->lchild;
	do
	{
		if(flag==0)
			cout<< curr->data<<" ";
		if(((curr->lthread)!=1)&&(flag==0) )
		{

			curr=curr->lchild;
		}
		else
		{

			flag=curr->rthread;
			curr=curr->rchild;
		}
	}while((curr!=dummy));
}

int main()
{
	char postfix[MAX];
	int ch;
	TBT t;
	//clrscr();
	cout<<"\nEnter a postfix expression";
	cin>>postfix;
	while(1)
	{
		cout<<"\n                    MENU                    ";
		cout<<"\n1.Create a tree\n2.Inorder Traversal\n3.Preorder Traversal\n4.Exit";
		cout<<"\n\n\tEnter your choice";
		cin>>ch;
		switch(ch)
		{
			case 1:cout<<"\nTo create a tree";
			       t.create(postfix);
			       cout<<"\n\n\t\tNODE  IS  CREATED.";
			       break;
			case 2:cout<<"\nInorder Traversal.";
			       t.inorder();
			       break;
			case 3:cout<<"\nPreorder Traversal.";
			       t.preorder();
			       break;
			case 4:exit(0);
		}
	}

}
