#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* left;
    Node* right;
    Node(int d){
        data = d;
        left = NULL;
        right = NULL;
    }
    Node* insert(Node* root, int data) {
        if(root == NULL){
            return new Node(data);
        }

        else{
            Node* cur;
            if(data <= root->data) {
                cur = insert(root->left, data);
                root->left = cur;
            }

            else {
                cur = insert(root->right, data);
                root->right = cur;
            }
        return root;
     }
    }
    void inorder(Node* root){
        if(root == NULL)
            return;
        
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
    void preorder(Node* root){
        if(root == NULL)
            return;
        
        
        cout << root->data << " ";
       
        preorder(root->left);
        
        preorder(root->right);
    }
    void postorder(Node* root){
        if(root == NULL)
            return;
        
        
        postorder(root->left);
        
        postorder(root->right);
        
        cout << root->data << " ";
    }
     
      Node* search(Node* root, int key) {
            if(root == NULL || root->data == key)
                return root;

            
            if(root->data < key)
                return search(root->right,key);

            
            return search(root->left,key);
         }

};
int main(){
    int choice;
    Node Tree(0);
    Node* root = NULL;
    do{
        cout<<"\n1.insert \n2.inorder \n3.postorder \n4.preorder \n5.search \n6.exit \nenter your choice::";
        cin>>choice;
        switch(choice){
            case 1:

            int t;
            cout<<"enter the number of node to insert";
             cin>>t;
            for(int i=1;i<=t;i++){
            cout<<"enter the data";
            int data;
            cin>>data;
            root = Tree.insert(root,data);
            }
            break;

            case 2:
            Tree.inorder(root);
            break;

            case 3:
            Tree.postorder(root);
            break;

            case 4:
            Tree.preorder(root);
            break;

            case 5:
            int data;
            cout << "Enter the data to find:";  
            cin>>data;
            root= Tree.search(root,data);
            break;

            case 6:
            cout<<"exit successfully";
            break;

            default :
            cout<<"enter valid choice";
            break;
        }

    }while(choice!=6);
}